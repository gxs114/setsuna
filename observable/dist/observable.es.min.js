function e(e,t){return console.warn(`[Observable ${e} warn]: ${t}`)}function t(e,...t){return console.error(`[Observable ${e} has error]: ${t.join("\n")}`)}function r(e){return e}function s(e){throw e}const o={SKIP:"_ob_return_skip",LOOP:"_ob_return_loop"};class n{#e=[];#t=[];#r=!1;get closed(){return this.#r}constructor(t){t&&c(t)?t.subscribe({next:e=>this.next(e),error:e=>this.error(e),complete:()=>this.complete()}):void 0!==t&&e("constructor",`${t} is not Observable`)}pipe(...o){var n;return this.#r?e("pipe","流已经被关闭，添加管道操作无效"):this.#e.push(...(n=o,n.reduce(((e,o)=>("function"==typeof o?e.push({next:o,error:s,complete:r}):"object"==typeof o?e.push({next:o.next??r,error:o.error??s,complete:o.complete??r}):t("pipe","非法的管道操作符",o),e)),[]))),this}subscribe(r){if(this.#r)return e("pipe","流已经被关闭，添加管道操作无效");const s=function(e){return"function"==typeof e?{next:e}:"object"==typeof e?e:void t("subscribe","非法的订阅函数",e)}(r);return this.#t.push(s),function(){const e=this.#t.indexOf(s);e>-1&&this.#t.splice(e,1)}}next(t){if(this.#r)return e("pipe","流已经被关闭，添加管道操作无效");this.#s("next",t)}error(t){if(this.#r)return e("pipe","流已经被关闭，添加管道操作无效");this.#s("error",t)}complete(){this.#r||(this.#r=!0,this.#s("complete"))}async#s(e,r){const s=e,n=r;for(const c of this.#e)try{let t=c[e](r);if(t instanceof Promise&&(t=await t),t===o.SKIP)break;if(t===o.LOOP){this.#s(s,n);break}"complete"!==e&&(e="next",r=t)}catch(s){"complete"===e?t("complete","",c[e]):(e="error",r=s)}this.#o(e,r)}async#o(e,r){const s=this.#t.reduce(((t,r)=>(e in r&&t.push(r[e]),t)),[]);if(0===s.length&&"error"===e)return t("subscribe","执行过程存在未处理的错误",r);for(const e of s)try{e(r)}catch(s){t("subscribe",`${e.name}(${r})`,s)}}}function c(e){return null!==e&&"object"==typeof e&&"function"==typeof e.pipe&&"function"==typeof e.subscribe}function i(e=(()=>null),t){if("function"!=typeof e)throw Error("[defineLazyObservable error]: `fn`不是一个合法的函数\n",e);const r=new n(t),s=r.subscribe.bind(r);return r.subscribe=function(t){s(t),e(r)},r}function u(e,...t){return i((r=>{if(t.length>0){[e,...t].forEach((e=>r.next(e)))}else"object"==typeof e&&null!==e&&"forEach"in e?e.forEach((e=>r.next(e))):r.next(e)}))}export{n as Observable,o as RETURN,i as defineLazyObservable,c as isObservable,u as of};
